"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Databases = void 0;
const logger_1 = require("../../../logger");
const debug = logger_1.logger("db:meta:pouch:adapters:base");
const pouchdb_1 = __importDefault(require("pouchdb"));
const pouchdb_debug_1 = __importDefault(require("pouchdb-debug"));
const pouchdb_find_1 = __importDefault(require("pouchdb-find"));
const Id = __importStar(require("../../id/index"));
/**
 * Aggegrates logic for interacting wth a set of PouchDB databases identified
 * by resource collection name.
 */
class Databases {
    constructor(options) {
        this.setup(options.settings);
        this.definitions = options.definitions;
        this.generateId = Id.forDefinitions(this.definitions);
        pouchdb_1.default.plugin(pouchdb_debug_1.default);
        pouchdb_1.default.plugin(pouchdb_find_1.default);
        this.collections = Object.keys(options.definitions)
            .map((resource) => ({
            [resource]: this.createDatabase(resource)
        }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
        this.ready = this.initialize();
    }
    setup(_) { }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const [collectionName, definition] of Object.entries(this.definitions)) {
                yield this.initializeCollection(collectionName, definition);
            }
            debug("Databases ready.");
        });
    }
    initializeCollection(collectionName, definition) {
        return __awaiter(this, void 0, void 0, function* () {
            const collection = this.collections[collectionName];
            const { createIndexes } = definition;
            for (let index of createIndexes || []) {
                yield collection.createIndex({ index });
            }
        });
    }
    all(collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ready;
            const log = debug.extend(`${collectionName}:all`);
            log("Fetching all...");
            try {
                const { rows } = yield this.collections[collectionName].allDocs({
                    include_docs: true
                });
                const result = rows
                    // make sure we include `id` in the response as well
                    .map(({ doc }) => (Object.assign(Object.assign({}, doc), { id: doc["_id"] })))
                    // but filter out any views
                    .filter(({ views }) => !views);
                log("Found.");
                return result;
            }
            catch (error) {
                log("Error fetching all %s, got error: %O", collectionName, error);
                throw error;
            }
        });
    }
    find(collectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ready;
            const log = debug.extend(`${collectionName}:find`);
            log("Finding...");
            // handle convenient interface for getting a bunch of IDs while preserving
            // order of input request
            if (Array.isArray(options)) {
                const references = options;
                const unordered = yield this.find(collectionName, {
                    selector: {
                        id: {
                            $in: references
                                .filter(obj => obj)
                                .map(({ id }) => id)
                        }
                    }
                });
                const byId = unordered.reduce((byId, savedInput) => savedInput
                    ? Object.assign(Object.assign({}, byId), { [savedInput.id]: savedInput }) : byId, {});
                return references.map(reference => reference ? byId[reference.id] : undefined);
            }
            // allows searching with `id` instead of pouch's internal `_id`,
            // since we call the field `id` externally, and this approach avoids
            // an extra index
            const fixIdSelector = (selector) => Object.entries(selector)
                .map(([field, predicate]) => field === "id" ? { _id: predicate } : { [field]: predicate })
                .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
            try {
                const { docs } = yield this.collections[collectionName].find(Object.assign(Object.assign({}, options), { selector: fixIdSelector(options.selector) }));
                // make sure we include `id` in the response as well
                const result = docs.map(doc => (Object.assign(Object.assign({}, doc), { id: doc["_id"] })));
                log("Found.");
                return result;
            }
            catch (error) {
                log("Error fetching all %s, got error: %O", collectionName, error);
                throw error;
            }
        });
    }
    get(collectionName, id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ready;
            if (typeof id !== "string") {
                return;
            }
            const log = debug.extend(`${collectionName}:get`);
            log("Getting id: %s...", id);
            try {
                const result = yield this.collections[collectionName].get(id);
                log("Got id: %s.", id);
                return Object.assign(Object.assign({}, result), { id });
            }
            catch (_) {
                log("Unknown id: %s.", id);
                return;
            }
        });
    }
    add(collectionName, input) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ready;
            const log = debug.extend(`${collectionName}:add`);
            log("Adding...");
            const resourceInputIds = input[collectionName].map(resourceInput => this.generateId(collectionName, resourceInput) || "");
            const resourceInputById = input[collectionName]
                .map((resourceInput, index) => ({
                [resourceInputIds[index]]: resourceInput
            }))
                .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
            const resources = yield Promise.all(Object.entries(resourceInputById)
                .filter(([id]) => id)
                .map(([id, resourceInput]) => __awaiter(this, void 0, void 0, function* () {
                // check for existing
                const resource = yield this.get(collectionName, id);
                if (resource) {
                    return resource;
                }
                yield this.collections[collectionName].put(Object.assign(Object.assign({}, resourceInput), { _id: id }));
                return Object.assign(Object.assign({}, resourceInput), { id });
            })));
            const resourcesById = resources
                .map(resource => ({
                [resource.id]: resource
            }))
                .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
            log("Added ids: %o", resources.map(({ id }) => id));
            return {
                [collectionName]: resourceInputIds.map(id => resourcesById[id])
            };
        });
    }
    update(collectionName, input) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ready;
            const log = debug.extend(`${collectionName}:update`);
            log("Updating...");
            const resourceInputIds = input[collectionName].map(resourceInput => this.generateId(collectionName, resourceInput) || "");
            const resourceInputById = input[collectionName]
                .map((resourceInput, index) => ({
                [resourceInputIds[index]]: resourceInput
            }))
                .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
            const resources = yield Promise.all(Object.entries(resourceInputById)
                .filter(([id]) => id)
                .map(([id, resourceInput]) => __awaiter(this, void 0, void 0, function* () {
                // check for existing
                const resource = yield this.get(collectionName, id);
                const { _rev = undefined } = resource ? resource : {};
                yield this.collections[collectionName].put(Object.assign(Object.assign({}, resourceInput), { _rev, _id: id }));
                return Object.assign(Object.assign({}, resourceInput), { id });
            })));
            const resourcesById = resources
                .map(resource => ({
                [resource.id]: resource
            }))
                .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
            log("Updated ids: %o", resources.map(({ id }) => id));
            return {
                [collectionName]: resourceInputIds.map(id => resourcesById[id])
            };
        });
    }
    remove(collectionName, input) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ready;
            const log = debug.extend(`${collectionName}:remove`);
            log("Removing...");
            yield Promise.all(input[collectionName].map((resourceInput) => __awaiter(this, void 0, void 0, function* () {
                const id = this.generateId(collectionName, resourceInput);
                if (!id) {
                    return;
                }
                const resource = yield this.get(collectionName, id);
                const { _rev = undefined } = resource ? resource : {};
                if (_rev) {
                    yield this.collections[collectionName].put({
                        _rev,
                        _id: id,
                        _deleted: true
                    });
                }
            })));
            log("Removed.");
        });
    }
}
exports.Databases = Databases;
//# sourceMappingURL=base.js.map