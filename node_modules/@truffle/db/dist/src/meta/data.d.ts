/// <reference types="pouchdb-find" />
/// <reference types="pouchdb-core" />
import type { Collections, CollectionName, MutableCollectionName, MutationInput, MutationPayload, SavedInput } from "./collections";
import type { IdObject } from "./id/index";
export interface Workspace<C extends Collections> {
    all<N extends CollectionName<C>>(collectionName: N): Promise<SavedInput<C, N>[]>;
    find<N extends CollectionName<C>>(collectionName: N, options: (IdObject<C, N> | undefined)[] | PouchDB.Find.FindRequest<{}>): Promise<(SavedInput<C, N> | undefined)[]>;
    get<N extends CollectionName<C>>(collectionName: N, id: string | undefined): Promise<Historical<SavedInput<C, N>> | undefined>;
    add<N extends CollectionName<C>>(collectionName: N, input: MutationInput<C, N>): Promise<MutationPayload<C, N>>;
    update<M extends MutableCollectionName<C>>(collectionName: M, input: MutationInput<C, M>): Promise<MutationPayload<C, M>>;
    remove<M extends MutableCollectionName<C>>(collectionName: M, input: MutationInput<C, M>): Promise<void>;
}
export declare type History = PouchDB.Core.IdMeta & PouchDB.Core.GetMeta;
export declare type Historical<T> = {
    [K in keyof T | keyof History]: K extends keyof History ? History[K] : K extends keyof T ? T[K] : never;
};
